#!/usr/bin/env bash

MISSING_BIN=""
DO_NDK=""

function check-installed() {
    if ! test "$1" ; then
        echo "Missing $1!"
        MISSING_BIN="yes"
    fi
}

check-installed "clang"
check-installed "cmake"
check-installed "ninja"
check-installed "git"
check-installed "make"

if [ "$MISSING_BIN" = "yes" ]; then
    echo "Missing dependencies! Aborting..."
    exit 1
fi

if ! [ -d "$ANDROID_NDK" ]; then
    echo "WARNING: NDK not specified or not found."
    echo "  Hint: If you wish to also build for android, specify with ANDROID_NDK=\"</path/to/ndk>\""
else
    DO_NDK="yes"
fi

echo "Updating all dependencies..."
git submodule update --init --recursive

function boringssl-gen-ninja() {
    if ! [ -d "build-host" ]; then
        echo "Generating host ninja file..."

        cmake -DCMAKE_POSITION_INDEPENDENT_CODE=TRUE \
              -DCMAKE_BUILD_TYPE=Release \
              -GNinja -B build-host 
    fi

    if [ "$DO_NDK" = "yes" ]; then
        # Android arm64-v8a
        if ! [ -d "build-android-arm64" ]; then
            echo "Generating android arm64-v8a ninja file..."

            cmake -DANDROID_ABI=arm64-v8a \
                  -DANDROID_PLATFORM=android-21 \
                  -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK}/build/cmake/android.toolchain.cmake \
                  -DCMAKE_POSITION_INDEPENDENT_CODE=TRUE \
                  -DCMAKE_BUILD_TYPE=Release \
                  -GNinja -B build-android-arm64  
        fi

        # Android armeabi-v7a
        if ! [ -d "build-android-armeabi-v7a" ]; then
            echo "Generating android armeabi-v7a ninja file..."

            cmake -DANDROID_ABI=armeabi-v7a \
                  -DANDROID_PLATFORM=android-16 \
                  -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK}/build/cmake/android.toolchain.cmake \
                  -DCMAKE_POSITION_INDEPENDENT_CODE=TRUE \
                  -DCMAKE_BUILD_TYPE=Release \
                  -GNinja -B build-android-armeabi-v7a  
        fi

        # Android x86
        if ! [ -d "build-android-x86" ]; then
            echo "Generating android x86 ninja file..."

            cmake -DANDROID_ABI=x86 \
                  -DANDROID_PLATFORM=android-16 \
                  -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK}/build/cmake/android.toolchain.cmake \
                  -DCMAKE_POSITION_INDEPENDENT_CODE=TRUE \
                  -DCMAKE_BUILD_TYPE=Release \
                  -GNinja -B build-android-x86  
        fi
    fi
}

function boringssl-call-ninja() {
    cd build-host

    ninja -j10

    cd ..

    if [ "$DO_NDK" = "yes" ]; then
        # Android arm64-v8a
        cd build-android-arm64

        ninja -j10

        cd ..

        # Android armeabi-v7a
        cd build-android-armeabi-v7a

        ninja -j10

        cd ..

        # Android x86
        cd build-android-x86

        ninja -j10

        cd ..
    fi
}

function boringssl-build() {
    cd boringssl

    boringssl-gen-ninja
    boringssl-call-ninja

    cd ..
}

function boringssl-select() {
    cd boringssl

    if [ -d "build" ]; then
        rm build
    fi

    case "$1" in
        host)
            if ! [ -d "build-host" ]; then
                echo "You must build host first"
                exit 1
            fi
            ln -s build-host build
        ;;
        android-arm64)
            if ! [ -d "build-android-arm64" ]; then
                echo "You must build android-arm64 first"
                exit 1
            fi
            ln -s build-android-arm64 build
        ;;
        android-armeabi-v7a)
            if ! [ -d "build-android-armeabi-v7a" ]; then
                echo "You must build android-armeabi-v7a first"
                exit 1
            fi
            ln -s build-android-armeabi-v7a build
        ;;
        android-x86)
            if ! [ -d "build-android-x86" ]; then
                echo "You must build android-x86 first"
                exit 1
            fi
            ln -s build-android-x86 build
        ;;
        *)
            echo "Unknown target: $1"
            exit 1
        ;;
    esac

    cd ..
}

function boringssl-clean() {
    cd boringssl

    if [ "$1" = "deep" ]; then
        rm -rf build-host
        rm -rf build-android-arm64
        rm -rf build-android-armeabi-v7a
        rm -rf build-android-x86
        rm -f build

        return 0
    fi
    
    if [ -d "build-host" ]; then
        cd build-host
        ninja clean
    fi

    if [ -d "build-android-arm64" ]; then
        cd build-android-arm64
        ninja clean
    fi

    if [ -d "build-android-armeabi-v7a" ]; then
        cd build-android-armeabi-v7a
        ninja clean
    fi

    if [ -d "build-android-x86" ]; then
        cd build-android-x86
        ninja clean
    fi

    if [ -d "build" ]; then
        rm build
    fi

    cd ..
}

case "$1" in
    clean)
        boringssl-clean $2
    ;;
    android-arm64)
        boringssl-select "android-arm64"
    ;;
    android-armeabi-v7a)
        boringssl-select "android-armeabi-v7a"
    ;;
    android-x86)
        boringssl-select "android-x86"
    ;;
    host)
        boringssl-select "host"
    ;;
    *)
        boringssl-build
    ;;
esac